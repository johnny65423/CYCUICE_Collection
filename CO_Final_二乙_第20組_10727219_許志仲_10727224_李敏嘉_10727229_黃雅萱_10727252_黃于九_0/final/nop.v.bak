module nop( clk, reset, instr, en_reg, NOP  );
	input clk, reset;
   	 input[31:0] instr;
	output en_reg;
	output NOP;
	reg [2:0] count;
	reg en_reg, NOP;
	reg pass;


	always @( posedge clk or reset or instr ) begin
		if(reset)begin
			count<=0;
			en_reg<=0;
			pass<=1;
			NOP<=1'd0;
		end
		else begin
			if(instr[31:26]==6'd4) begin
				count<=1;
				en_reg<=1'd0;
				pass<=0;
			end
			else if(instr[31:26]==6'd2) begin
				count<=0;
				en_reg<=1'd0;
				pass<=0;
			end
			else if(instr[31:26]==6'd0&&instr[5:0]==6'd8) begin
				count<=0;
				en_reg<=1'd1;
				pass<=0;
			end
			else begin
				count<=0;
				en_reg<=1'd1;
				NOP<=1'd0;
				pass<=1;
			end
		end
	end

	always @( posedge clk ) begin
		if(count!=3'd0)begin
			count<=count-1;
		end
		else if (count==3'd0&&pass==0) begin
			en_reg<=1'd1;
			NOP<=1'd1;
		end
	end

endmodule
